@inject IJSRuntime JSRuntime
<div class="border shadow bg-light @(IsLoading ? "loading" : "")">
    @if (Header != null)
    {
        <h3 class="text-editor-header">@Header</h3>
    }
    <div class="monaco-editor-container">
        <MonacoEditor @ref="_editor" Model="_editorModel" />
    </div>
</div>
@code {
[Parameter] public EventCallback<string> ContentChanged { get; set; }
[Parameter] public bool ReadOnly { get; set; }
[Parameter] public string Header { get; set; }
[Parameter] public bool ShowAllWhiteSpaces { get; set; }
[Parameter] public bool IsLoading { get; set; }
private string _content = "";
[Parameter]
public string Content
{
    get => _content;
    set
    {
        if (_content == value) return;
        _content = value;
        UpdateEditorValue();
    }
}
private readonly EditorModel _editorModel = new EditorModel(new EditorOptions
{
    Language = "csharp",
    AutomaticLayout = true
});
private MonacoEditor _editor;
protected override void OnInit()
{
    _editorModel.Options.ReadOnly = ReadOnly;
    _editorModel.Options.Value = Content;
    if (ShowAllWhiteSpaces)
        _editorModel.Options.RenderWhitespace = "all";
}
private bool _renderedOnce;
protected override async Task OnAfterRenderAsync()
{
    if (_renderedOnce) return;
    await Task.Delay(200);  // Wait for the js to load.
    await JSRuntime.InvokeAsync<object>("monacoEvents.onChange", _editorModel.Id);
    TextChanged += TextChangedCallback;
    _renderedOnce = true;
}
private async void TextChangedCallback(string id) => await OnTextChanged(id);
private async Task OnTextChanged(string id)
{
    if (id != _editorModel.Id) return;
    _content = await BlazacoJSInterop.GetValue(JSRuntime, id);
    await ContentChanged.InvokeAsync(Content);
}
private void UpdateEditorValue()
{
    TextChanged -= TextChangedCallback;
    _ = BlazacoJSInterop.SetValue(JSRuntime, _editorModel.Id, Content).ContinueWith(_ =>
    {
        TextChanged -= TextChangedCallback; // if there was events, delete them.
        TextChanged += TextChangedCallback;
    });
}
private static event Action<string> TextChanged;
[JSInvokable]
public static void InvokeTextChanged(string id)
{
    TextChanged?.Invoke(id);
}
}
