@inject IJSRuntime JSRuntime
<div class="border shadow bg-light">
    @if (Header != null)
    {
        <h3 class="text-editor-header">@Header</h3>
    }
    <div class="monaco-editor-container">
        <MonacoEditor @ref="_editor" Model="_editorModel" />
    </div>
</div>
@code {
        private string _content = "";
        [Parameter]
        public string Content
        {
            get => _content;
            set
            {
                if (_content == value) return;
                _content = value;
                _changedByMe = true;
                _ = BlazacoJSInterop.SetValue(JSRuntime, _editorModel.Id, value);
            }
        }
        bool _changedByMe;
        [Parameter] public EventCallback<string> ContentChanged { get; set; }
        [Parameter] public bool ReadOnly { get; set; }
        [Parameter] public string Header { get; set; }

        private readonly EditorModel _editorModel = new EditorModel(new EditorOptions
        {
            Language = "csharp",
            AutomaticLayout = true
        });
        private MonacoEditor _editor;
        protected override void OnInit()
        {
            _editorModel.Options.ReadOnly = ReadOnly;
        }
        private bool _renderedOnce;
        protected override async Task OnAfterRenderAsync()
        {
            if (_renderedOnce) return;
            await Task.Delay(200);  // Wait for the js to load.
            await JSRuntime.InvokeAsync<object>("monacoEvents.onChange", _editorModel.Id);
            TextChanged += async id => await OnTextChanged(id);
            _renderedOnce = true;
        }
        private async Task OnTextChanged(string id)
        {
            if (id != _editorModel.Id) return;
            if (_changedByMe)
            {
                _changedByMe = false;
                return;
            }
            _content = await BlazacoJSInterop.GetValue(JSRuntime, id);
            await ContentChanged.InvokeAsync(Content);
        }
        private static event Action<string> TextChanged;
        [JSInvokable]
        public static void InvokeTextChanged(string id)
        {
            TextChanged?.Invoke(id);
        }
}
