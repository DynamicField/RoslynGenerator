@page "/"
@using Gu.Roslyn.Asserts
<h1 class="top-header">Write some code and get the SyntaxFactory version!</h1>
<div class="container-fluid">
    <div class="row">
        <div class="col-12 col-xl-6">
            <TextEditor @bind-Content="Code" Header="CODE" />
        </div>
        <div class="col-12 col-xl-6">
            <TextEditor @bind-Content="result" ReadOnly="true" Header="RESULT" />
        </div>
    </div>
    <div class="my-3">
        Parse as:
        <select @bind="SelectedType">
            @foreach (var item in choices)
            {
                <option value=@item>@item</option>
            }
        </select>
    </div>
</div>

@code {
CancellationTokenSource tokenSource = new CancellationTokenSource();
string result = "";
readonly ParseType[] choices = (ParseType[])Enum.GetValues(typeof(ParseType));
ParseType _selectedType;
ParseType SelectedType
{
    get => _selectedType;
    set
    {
        InvalidateChanges();
        _selectedType = value;
        _ = RegisterChange(Code, tokenSource.Token);
    }
}
private string _code = "class MyClass { }";
string Code
{
    get => _code;
    set
    {
        InvalidateChanges();
        _code = value;
        _ = RegisterChange(value, tokenSource.Token);
    }
}
async Task RegisterChange(string requestedCode, CancellationToken cancellationToken)
{
    await Task.Delay(250);
    await UpdateSyntaxFactory(cancellationToken);
}
async Task UpdateSyntaxFactory(CancellationToken cancellationToken)
{
    cancellationToken.ThrowIfCancellationRequested();
    SyntaxNode node = null;
    switch (SelectedType)
    {
        case ParseType.Compilation:
            node = await SyntaxFactory.ParseSyntaxTree(Code).GetRootAsync(cancellationToken);
            break;
        case ParseType.Member:
            node = SyntaxFactory.ParseMemberDeclaration(Code);
            break;
        case ParseType.Expression:
            node = SyntaxFactory.ParseExpression(Code);
            break;
        case ParseType.Statement:
            node = SyntaxFactory.ParseStatement(Code);
            break;
        default:
            goto case ParseType.Compilation;
    }
    var syntaxFactoryCode = await Task.Run(() => SyntaxFactoryWriter.Serialize(node), cancellationToken);
    result = syntaxFactoryCode;
    StateHasChanged();
}
private void InvalidateChanges()
{
    tokenSource.Cancel();
    tokenSource = new CancellationTokenSource();
}
protected override async Task OnInitAsync()
{
    InvalidateChanges();
    await UpdateSyntaxFactory(tokenSource.Token);
}
}