@page "/"
@using Gu.Roslyn.Asserts
<h1 class="top-header">Write some code and get the SyntaxFactory version!</h1>
<div class="container-fluid">
    <div class="row my-2">
        <div class="col-auto font-weight-bold">
            Parse as
        </div>
        <div class="col">
            <select @bind="SelectedType" class="w-100">
                @foreach (var item in choices)
                {
                    <option value=@item>@item</option>
                }
            </select>
        </div>
    </div>
    <div class="row">
        <div class="col-12 col-xl-4">
            <TextEditor @bind-Content="Code" ShowAllWhiteSpaces="true" Header="CODE" />
        </div>
        <div class="col-12 col-xl-8">
            <TextEditor @bind-Content="result" ReadOnly="true" Header="RESULT" IsLoading="isLoading" />
        </div>
    </div>
    <footer class="mt-3">
        <p>SyntaxFactory Translation powered by <a href="https://github.com/GuOrg/Gu.Roslyn.Asserts">Gu.Roslyn.Asserts</a></p>
    </footer>
</div>
@code {
    CancellationTokenSource tokenSource = new CancellationTokenSource();
    string result = "";
    readonly ParseType[] choices = (ParseType[])Enum.GetValues(typeof(ParseType));
    ParseType _selectedType;
    ParseType SelectedType
    {
        get => _selectedType;
        set
        {
            InvalidateChanges();
            _selectedType = value;
            _ = RegisterChange(tokenSource.Token);
        }
    }
    private string _code = "class MyClass { }";
    string Code
    {
        get => _code;
        set
        {
            InvalidateChanges();
            _code = value;
            _ = RegisterChange(tokenSource.Token);
        }
    }
    bool isLoading;
    private async Task RegisterChange(CancellationToken cancellationToken)
    {
        await Task.Delay(350, cancellationToken);
        cancellationToken.ThrowIfCancellationRequested();
        isLoading = true;
        StateHasChanged();
        await Task.Delay(2, cancellationToken); // Update the UI
        UpdateSyntaxFactory(cancellationToken);
    }
    private void UpdateSyntaxFactory(CancellationToken cancellationToken)
    {
        SyntaxNode node = GetNodeFromCode(cancellationToken);
        cancellationToken.ThrowIfCancellationRequested();
        var syntaxFactoryCode = SyntaxFactoryWriter.Serialize(node);
        cancellationToken.ThrowIfCancellationRequested();
        result = syntaxFactoryCode;
        isLoading = false;
        StateHasChanged();
    }
    private SyntaxNode GetNodeFromCode(CancellationToken cancellationToken)
    {
        cancellationToken.ThrowIfCancellationRequested();
        switch (SelectedType)
        {
            case ParseType.Compilation:
                return SyntaxFactory.ParseSyntaxTree(Code).GetRoot(cancellationToken);
            case ParseType.Member:
                return SyntaxFactory.ParseMemberDeclaration(Code);
            case ParseType.Expression:
                return SyntaxFactory.ParseExpression(Code);
            case ParseType.Statement:
                return SyntaxFactory.ParseStatement(Code);
            default:
                goto case ParseType.Compilation;
        }
    }
    private void InvalidateChanges()
    {
        tokenSource.Cancel();
        tokenSource = new CancellationTokenSource();
    }
    protected override void OnInit()
    {
        InvalidateChanges();
        UpdateSyntaxFactory(tokenSource.Token);
    }
}